{
  "env": {
    "PATH": "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/mysql/bin:/usr/local/mongo/bin:/opt/X11/bin:/usr/local/share/dotnet:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/ckeyer/go/bin:/usr/local/go/bin",
    "GOROOT": "/usr/local/go",
    "GOPATH": "/Users/ckeyer/go"
  },
  "gscomplete_enabled": true,
  "comp_lint_enabled": true,
  "fmt_enabled": true,
  "fmt_cmd": [
    "goimports"
  ],
  "ipc_timeout": 3,
  "autocomplete_suggest_imports": true,
  "use_named_imports": true,
  "snippets": [
    {
      "match": {
        "global": true
      },
      "snippets": [
        {
          "text": "float32",
          "title": "float32",
          "value": "float32"
        },
        {
          "text": "float64",
          "title": "float64",
          "value": "float64"
        },
        {
          "text": "complex64",
          "title": "complex64",
          "value": "complex64"
        },
        {
          "text": "complex128",
          "title": "complex128",
          "value": "complex128"
        },
        {
          "text": "interface",
          "title": "interface{}",
          "value": "interface{$1}"
        },
        {
          "text": "return ",
          "title": "return",
          "value": "return $1"
        },
        {
          "text": "continue",
          "title": "continue",
          "value": "continue"
        },
        {
          "text": "println",
          "title": "println(...)",
          "value": "println($1)"
        },
        {
          "text": "sarr",
          "title": "[]string{...}",
          "value": "[]string{$2}"
        },
        {
          "text": "arr",
          "title": "[]Type{...}",
          "value": "[]${1:string}{$2}"
        },
        {
          "text": "map",
          "title": "map[]...",
          "value": "map[${1:string}]${2:string}"
        },
        {
          "text": "map struct",
          "title": "map[string]struct...",
          "value": "map[${1:string}]struct{}"
        },
        {
          "text": "append",
          "title": "sli = append(sli, ...)",
          "value": "${1:sli} = append(${1:sli}, ${2:...})"
        },
        {
          "text": "append just",
          "title": "append(...)",
          "value": "append(${1:sli}, ${2:...})"
        },
        {
          "text": "if err ?= nil",
          "title": "if err{}",
          "value": "if ${1:err} != ${2:nil} { $3\n\treturn $4\n}"
        },
        {
          "text": "for k,v range",
          "title": "for range",
          "value": "for ${2:k}, ${3:v} := range ${1:set} {\n\t$4\n}"
        },
        {
          "text": "go func",
          "title": "go func()",
          "value": "go func($1) $2 {\n\t$3\n}($4)"
        },
        {
          "text": "defer do",
          "title": "defer ...",
          "value": "defer $1"
        },
        {
          "text": "defer func",
          "title": "defer func()",
          "value": "defer func(){\n\t$1\n}()"
        },
        {
          "text": "recover",
          "title": "recover",
          "value": "if ${1:r} := recover(); ${1:r} != nil {\n\t$3\n}"
        },
        {
          "text": "var struct",
          "title": "var Type struct ...",
          "value": "var $1 struct{\n\t${2:Name} ${3:string}\n}"
        },
        {
          "text": "type struct",
          "title": "type Type struct ...",
          "value": "type ${1:Name} struct{\n\t${2:Name} ${3:string}\n}"
        },
        {
          "text": "type interface",
          "title": "type Type interface ...",
          "value": "type ${1:Name} interface{\n\t${2:Do}() ${3}\n}"
        },
        {
          "text": "switch",
          "title": "switch",
          "value": "switch ${1:type} {\ncase ${2:branch}: $3\ndefault:\n\t$4\n}"
        },
        {
          "text": "select",
          "title": "select",
          "value": "select {\ncase ${1:branch}: $2\ndefault:\n\t$3\n}"
        },
        {
          "text": "case",
          "title": "case",
          "value": "case ${1:branch}: $2"
        },
        {
          "text": "fallthrough",
          "title": "fallthrough",
          "value": "fallthrough"
        },
        {
          "text": "test",
          "title": "Test{}",
          "value": "// Test$1 ${2:...} \nfunc Test$1(${3:t} *testing.T) {\n\t$4\n}"
        },
        {
          "text": "benchmark",
          "title": "Benchmark{}",
          "value": "func Benchmark$1(${2:b} *testing.B) {\n\t$3\n}"
        }
      ]
    }
  ],
  "default_snippets": [
    {
      "match": {
        "global": false,
        "pkgname": ""
      },
      "snippets": [
        {
          "text": "package ${default_pkgname}",
          "title": "",
          "value": "package ${default_pkgname}\n\n$1\n"
        },
        {
          "text": "main",
          "title": "start main",
          "value": "package main\n\nfunc main() {\n\t$0\n}\n"
        }
      ]
    },
    {
      "match": {
        "global": true,
        "pkgname": "^main$"
      },
      "snippets": [
        {
          "text": "func main",
          "title": "func main {...}",
          "value": "func main() {\n\t$0\n}\n"
        }
      ]
    },
    {
      "match": {
        "global": true,
        "pkgname": "."
      },
      "snippets": [
        {
          "text": "import",
          "title": "import (...)",
          "value": "import (\n\t\"$1\"\n)"
        },
        {
          "text": "func",
          "title": "func {...}",
          "value": "// ${1:name} ${2:...} \nfunc ${1:name}($3) $4 {\n\t$0\n}"
        },
        {
          "text": "var",
          "title": "var (...)",
          "value": "var (\n\t$1\n)"
        },
        {
          "text": "const",
          "title": "const (...)",
          "value": "const (\n\t$1\n)"
        },
        {
          "text": "init",
          "title": "func init()",
          "value": "func init() {\n\t$1\n}"
        },
        {
          "text": "func http handler",
          "title": "func(rw, req)",
          "value": "func ${1:name}(rw http.ResponseWriter, req *http.Request) {\n\t$0\n}"
        }
      ]
    },
    {
      "match": {
        "global": true,
        "pkgname": ".",
        "has_types": true
      },
      "snippets": [
        {
          "text": "func (*${typename})",
          "title": "func (...) {...}",
          "value": "// ${3:name} ${4:...} \nfunc (${1:${typename_abbr}} ${2:*}${typename}) ${3:name}($5)$6 {\n\t$0\n}"
        }
      ]
    },
    {
      "match": {
        "local": true
      },
      "snippets": [
        {
          "text": "func",
          "title": "func{...}()",
          "value": "func($1) {\n\t$0\n}($2)"
        },
        {
          "text": "var",
          "title": "var [name] [type]",
          "value": "var ${1:name} ${2:type}"
        }
      ]
    }
  ]
}
